# Define the name of the workflow.
name: E2E Tests

# Define the events that trigger the workflow.
on:
  # Run the workflow when a pull request is made to the "main" branch.
  pull_request:
    branches: [main]
  # Allow running the workflow manually from the GitHub Actions tab.
  workflow_dispatch:

# Define the jobs in this workflow.
jobs:
  e2e-tests:
    # Run this job on the latest Ubuntu (Linux) runner hosted by GitHub.
    runs-on: ubuntu-latest
    # Limit the execution time of this job to 15 minutes.
    timeout-minutes: 15
    # Define the steps in this job.
    steps:
      # Checkout the this repository.
      - name: Checkout
        uses: actions/checkout@v3

      # Build and start the "express-app" and "react-app" containers in detached mode to avoid blocking the workflow.
      - name: Start local environment with Docker Compose
        run: docker compose up -d

      # Build the Docker image for E2E tests.
      - name: Build E2E Docker image
        run: docker build -t playwright-tests ./e2e

      - name: Register initial container memory usage
        run: |
          declare -A initial_mem_usage

          for container in backend frontend; do
            mem_usage=$(docker stats --no-stream --format "{{.MemUsage}}" $container)
            initial_mem_usage[$container]=$(echo $mem_usage | awk '{print $1}')
          done
          echo "INITIAL_MEM_USAGE=$(declare -p initial_mem_usage)" >> $GITHUB_ENV

      # Execute the E2E tests
      - name: Run E2E tests against local environment
        run: docker run -v $(pwd)/e2e-report:/app/e2e-report --name playwright-tests --network=host playwright-tests yarn e2etest:ci

      - name: Check container memory usage after tests
        run: |
          declare -A final_mem_usage
          increased_mem_containers=""

          for container in backend frontend; do
            mem_usage=$(docker stats --no-stream --format "{{.MemUsage}}" $container)
            final_mem_usage[$container]=$(echo $mem_usage | awk '{print $1}')

            initial=${initial_mem_usage[$container]}
            final=${final_mem_usage[$container]}

            increase=$(echo "$final * 100 / $initial" | bc -l)
            if (( $(echo "$increase > 150" | bc -l) )); then
              increased_mem_containers+="$container "
            fi
          done

          if [[ -n $increased_mem_containers ]]; then
            echo "Memory usage of these containers increased by more than 50%: $increased_mem_containers"
            exit 1
          fi

      # Prepare the logs for all containers.
      - name: Prepare container logs
        if: always() # Ensure logs are captured, even if the tests fail.
        run: |
          # Create the "logs" directory
          mkdir -p logs

          # Export each Docker container's logs to files in the "logs" directory.
          docker logs express-app >& logs/express-app.log
          docker logs react-app >& logs/react-app.log
          docker logs playwright-tests >& logs/playwright-tests.log

      # Upload the logs for all containers as an artifact.
      - name: Upload container logs
        if: always() # Ensure logs are captured, even if the tests fail.
        uses: actions/upload-artifact@v2
        with:
          name: E2E Logs
          path: logs

      # Upload the test report and video recordings as an artifact.
      - name: Upload Test Report
        if: always() # Ensure test report is captured, even if the tests fail.
        uses: actions/upload-artifact@v2
        with:
          name: E2E Test Report
          path: e2e/e2e-report
