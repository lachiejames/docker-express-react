# Define the name of the workflow.
name: E2E Tests

# Define the events that trigger the workflow.
on:
  # Run the workflow when a pull request is made to the "main" branch.
  pull_request:
    branches: [main]
  # Allow running the workflow manually from the GitHub Actions tab.
  workflow_dispatch:

# Set your container names here
env:
  CONTAINERS: "express-app react-app"

# Define the jobs in this workflow.
jobs:
  e2e-tests:
    # Run this job on the latest Ubuntu (Linux) runner hosted by GitHub.
    runs-on: ubuntu-latest
    # Limit the execution time of this job to 15 minutes.
    timeout-minutes: 15
    # Define the steps in this job.
    steps:
      # Checkout the this repository.
      - name: Checkout
        uses: actions/checkout@v3

      # Build and start the "express-app" and "react-app" containers in detached mode to avoid blocking the workflow.
      - name: Start local environment with Docker Compose
        run: docker compose up -d

      # Build the Docker image for E2E tests.
      - name: Build E2E Docker image
        run: docker build -t playwright-tests ./e2e

      - name: Install ts-node
        run: npm install -g ts-node

      - name: Register pre-E2E container memory usage
        id: initial_memory_usage
        run: |
          for CONTAINER in ${{ env.CONTAINERS }}; do
            MEMORY_USAGE=$(docker stats --no-stream --format '{{.MemUsage}}' $CONTAINER)
            echo "Pre-E2E memory usage for $CONTAINER: $MEMORY_USAGE"

            # Store the initial memory usage of each container as an output variable.
            echo "::set-output name=${CONTAINER}::$MEMORY_USAGE"
          done

      # Execute the E2E tests
      - name: Run E2E tests against local environment
        run: docker run -v $(pwd)/e2e-report:/app/e2e-report --name playwright-tests --network=host playwright-tests yarn e2etest:ci

      - name: Register post-E2E container memory usage
        id: final_memory_usage
        run: |
          for CONTAINER in ${{ env.CONTAINERS }}; do
            MEMORY_USAGE=$(docker stats --no-stream --format '{{.MemUsage}}' $CONTAINER)
            echo "Post-E2E memory usage for $CONTAINER: $MEMORY_USAGE"

            # Store the final memory usage of each container as an output variable.
            echo "::set-output name=${CONTAINER}::$MEMORY_USAGE"
          done

      - name: Check for memory leaks
        run: |
          for CONTAINER in ${{ env.CONTAINERS }}; do
            INITIAL_MEM_USAGE="${{ steps.initial_memory_usage.outputs[$CONTAINER] }}"
            FINAL_MEM_USAGE="${{ steps.final_memory_usage.outputs[$CONTAINER] }}"

            # Use the checkForMemoryLeaks script to check for memory leaks in each container.
            ts-node ./scripts/checkForMemoryLeaks.ts $CONTAINER $INITIAL_MEM_USAGE $FINAL_MEM_USAGE
          done

      # Prepare the logs for all containers.
      - name: Prepare container logs
        if: always() # Ensure logs are captured, even if the tests fail.
        run: |
          # Create the "logs" directory
          mkdir -p logs

          # Export each Docker container's logs to files in the "logs" directory.
          for CONTAINER in ${{ env.CONTAINERS }}; do
            docker logs $CONTAINER >& logs/$CONTAINER.log
          done

      # Upload the logs for all containers as an artifact.
      - name: Upload container logs
        if: always() # Ensure logs are captured, even if the tests fail.
        uses: actions/upload-artifact@v2
        with:
          name: E2E Logs
          path: logs

      # Upload the test report and video recordings as an artifact.
      - name: Upload Test Report
        if: always() # Ensure test report is captured, even if the tests fail.
        uses: actions/upload-artifact@v2
        with:
          name: E2E Test Report
          path: e2e-report
